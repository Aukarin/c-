import keras
import os
import tensorflow as tf
import pandas as pd
import numpy as np
import matplotlib as pl
from keras.layers.core import Dense, Dropout, Activation
from keras.preprocessing.image import ImageDataGenerator
from keras.layers import Conv2D, MaxPooling2D, ZeroPadding2D, GlobalAveragePooling2D, Flatten
from keras.layers.normalization import layer_normalization
import cv2
from sklearn.model_selection import train_test_split
from keras.utils import np_utils
from keras.models import Sequential
from matplotlib import pyplot as plt

from google.colab import drive #case mounted gdrive
drive.mount('/content/gdrive', force_remount=False)

class_names = ['No', 'Yes']

path = "/content/gdrive/MyDrive/Colab Notebooks/PJ/Mask"
files = os.listdir(path)
categories = []

for filename in files:
    category = filename.split('.')[0]
    if 'No' in category:
        categories.append("0")
    elif 'Yes' in category:
        categories.append("1")
    
        
    else: pass
df = pd.DataFrame({
    'filename': files,
    'category': categories
})

print(df.head(14))

from keras.preprocessing.image import load_img
from keras.preprocessing.image import img_to_array

X =  np.empty([0])
y = np.empty([0])
for filename in files:
    print(path+"/"+filename)
    # load the image
    #img = load_img(path+"/"+filename)
    img = cv2.imread(path+"/"+filename)
    img = cv2.resize(img,(200,200))

    #print(type(img))
    #print(img.format)
    #print(img.mode)
    print(img.size)
    #img.show()


    # convert to numpy array matrix  pixcel to row colum 
    img_array = img_to_array(img)   
   
    X = np.append (X,img_array)
    category = filename.split('.')[0]
    if 'No' in category:
        y = np.append(y,[0])
    elif 'Yes' in category:
        y = np.append(y,[1])
    
    
        
    else: pass

X = X.reshape(len(y),200,200,3) 
x_vector = 200*200*3

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1)
print("X_train shape", X_train.shape)
print("y_train shape", y_train.shape)
print("X_test shape", X_test.shape)
print("y_test shape", y_test.shape)

print(type(X_train))
print(type(y_train))

len_train  = len(X_train)
len_test = len(X_test)

X_train = X_train.reshape(len_train, x_vector) 
X_test = X_test.reshape(len_test, x_vector)   

X_train = X_train.astype('float32')   # change integers to 32-bit floating point numbers
X_test = X_test.astype('float32')

X_train /= 255                    
X_test /= 255  # it is good practice to normalize the pixel values so that each pixel value has a value between 0 and 1

print("Training matrix shape", X_train.shape)
print("Testing matrix shape", X_test.shape)

nb_classes = 2 # number of unique digits

Y_train = np_utils.to_categorical(y_train, nb_classes) #Converts a class vector (integers) to binary class matrix.
Y_test = np_utils.to_categorical(y_test, nb_classes)
print("y_train shape", y_train.shape)
print("y_test shape", y_test.shape)

#Neural Network using Tensorflow
model = Sequential()
model.add(Dense(256, input_shape=(x_vector,))) 
model.add(Activation('relu'))
#model.add(Dropout(0.2))
model.add(Dense(64))
model.add(Activation('relu'))
#model.add(Dropout(0.2))
model.add(Dense(2))
model.add(Activation('sigmoid'))
model.summary()

model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

history = model.fit(X_train, Y_train, batch_size=10, epochs=15, validation_data=(X_test, Y_test))

score = model.evaluate(X_train, Y_train, verbose = 0)
print('Train loss : ', score[0])
print('Train accuracy : ', score[1])

score1 = model.evaluate(X_test, Y_test, verbose = 0)
print('Test loss : ', score1[0])
print('Test accuracy : ', score1[1])

import keras
print(keras.backend.backend()) 
import tensorflow as tf
print(tf.__version__)

tf.keras.Sequential([model,tf.keras.layers.Softmax()])
result = model.predict(X_test) 
for i in range(5):
  print(np.argmax(result[i]))

plt.rcParams['figure.figsize'] = (9,9) # change figure size to plot graph

for i in range(5):
    plt.subplot(2,3,i+1)
    plt.imshow(X_test[i].reshape(200,200,3))
    plt.title("Class {}".format(y_test[i]))  
plt.tight_layout()

from keras.preprocessing.image import array_to_img
image_show = array_to_img(X_test[4].reshape(200,200,3))
image_show

print(class_names [np.argmax( [result[4] ] ) ])

model.save("/content/gdrive/MyDrive/Colab Notebooks/PJ/pima9_model.h5")
print("Saved model.")